
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_ROWS 9
#define MAX_COLS 9
typedef struct {
    int fishes; // Nombre de poissons sur la case
    int penguin; // Identifiant du pingouin sur la case, 0 si aucun
    int broken; // Indique si la case est occup√©e (1 pour oui, 0 pour non)
} Cell;



void initializeBoard(Cell board[][MAX_COLS], int rows, int cols) {
    srand(time(NULL)); // initialisation de rand()

    // Initialiser toutes les cellules avec des poissons al√©atoires entre 1 et 3
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            board[i][j].fishes = rand() % 3 + 1; // Entre 1 et 3 poissons
            board[i][j].penguin = 0;
            board[i][j].broken = 0;
        }
    }

    // D√©terminer le nombre maximum de cases sans poissons possibles
    int maxZeroFishCells = (rows * cols) - 1; // Total cells minus one already set
    int zeroFishCells = maxZeroFishCells < 2 ? maxZeroFishCells : 2; // Maximum two, but not exceeding the number of available cells

    board[0][1].fishes = 0; // Set one cell to have zero fish initially
    while (zeroFishCells > 0) {
        int i = rand() % rows;
        int j = rand() % cols;
        if (board[i][j].fishes != 0) { // Check if the cell already has zero fish
            board[i][j].fishes = 0;
            zeroFishCells--;
        }
    }
}



// Fonction pour afficher une ligne d'hexagones
void printHexagonLine(Cell board[][MAX_COLS],int cols) {

    printf("\n");

    for (int i = 0; i < cols; i++) {
        printf(" /      \\ ");
        printf("      ");
    }
    printf("\n");
    for (int i = 0; i < 1; i++) {
        for (int j = 0; j < cols-1; j++) {
            if (board[i][j].fishes == 0){
                printf("/        \\");
            }
            else if(board[i][j].fishes == 1){
                printf("/   üêü   \\");
            }
            else if(board[i][j].fishes == 2){
                printf("/  üêüüêü  \\");
            }
            else if(board[i][j].fishes == 3){
                printf("/ üêüüêüüêü \\");
            }
        printf("______");  
        }
        printf("/        \\");
    }
    printf("\n");
    for (int i = 0; i < cols; i++) {
        printf("\\        /");
        printf("      ");
    }
    printf("\n");
    for (int i = 0; i < cols; i++) {
        printf(" \\______/ ");
        printf("      ");
    }

}

// Fonction pour afficher la zone de jeu hexagonale avec les noms et scores des joueurs
void printGameBoard(int rows, int cols, char *player_names[], int num_players,Cell board[][MAX_COLS]) {
    // Affichage des noms et scores des joueurs
    printf("Joueurs :\n");
    for (int i = 0; i < num_players; i++) {
        printf("Joueur %d : %s\n", i + 1, player_names[i]);
    }
    printf("\n");

    // Affichage de la zone de jeu
    printf("\x1B[1;1H");
    for (int i = 0; i < cols; i++) {
        printf("  ______  ");
        printf("      ");
    }

    for (int i = 0; i < rows; i++) {
        printHexagonLine(board,cols);
    }
    printf("\x1B[3;5H\x1B[48;2;255;128;0müêß\x1B[0m");
    

    // Affichage du nombre de poissons sur chaque case

}
int main() {
    system("clear"); 
    int num_players;
    char *player_names[6];
    int rows, cols;


    // Demande du nombre de joueurs
    printf("Nombre de joueurs (entre 2 et 6) : ");
    scanf("%d", &num_players);

    // V√©rification de la validit√© du nombre de joueurs
    if (num_players < 2 || num_players > 6) {
        printf("Nombre de joueurs invalide. Veuillez entrer un nombre entre 2 et 6.\n");
        return 1;
    }

    // Demande des noms des joueurs
    for (int i = 0; i < num_players; i++) {
        player_names[i] = (char *)malloc(50 * sizeof(char));
        printf("Nom du joueur %d : ", i + 1);
        scanf("%s", player_names[i]);
    }

    // Fixation de la taille du plateau de jeu
    printf("Nombre de lignes du plateau de jeu : ");
    scanf("%d", &rows);
    printf("Nombre de colonnes du plateau de jeu : ");
    scanf("%d", &cols);
    Cell board[MAX_ROWS][MAX_COLS];
    // V√©rification de la validit√© de la taille du plateau de jeu
    if (rows < 1 || cols < 1 || rows > MAX_ROWS || cols > MAX_COLS) {
        printf("Taille du plateau invalide. Veuillez choisir des dimensions entre 1 et 9.\n");
        return 1;
    }
    initializeBoard(board,rows,cols);
    // Affichage de la zone de jeu
    printGameBoard(rows, cols, player_names, num_players,board);

    

    printf("\x1B[40;20H\n");
    // Lib√©ration de la m√©moire allou√©e pour les noms des joueurs
    for (int i = 0; i < num_players; i++) {
        free(player_names[i]);
    }

    return 0;
}
