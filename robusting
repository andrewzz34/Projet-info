#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define MAX_ROWS 9
#define MAX_COLS 9
#define MAX_PLAYERS 6
#define MAX_NAME_LENGTH 49
#define PLAYER_NAME_BUFFER 50 

typedef struct {
    char player_name[PLAYER_NAME_BUFFER];
    int score;
    int penguins; 
} Player;

typedef struct {
    int fishes; // Nombre de poissons sur la case
    int penguin; // Identifiant du pingouin sur la case, 0 si aucun
    int broken; // Indique si la case est occup√©e (1 pour oui, 0 pour non)
} Cell;

void setupPlayers(Player* players, int num_players) {
    for (int i = 0; i < num_players; i++) {
        printf("Enter name for player %d (up to 49 characters): ", i + 1);
        scanf("%49s", players[i].player_name); // Limite l'entr√©e pour √©viter le d√©bordement de tampon
        while (getchar() != '\n');

        if (strlen(players[i].player_name) > MAX_NAME_LENGTH) {
            printf("Name entered is too long. Please enter a name up to 49 characters.\n");
            scanf("%49s", players[i].player_name); // Limite l'entr√©e pour √©viter le d√©bordement de tampon
        }

        players[i].score = 0;

        if (num_players == 2) {
            players[i].penguins = 4;
        } else if (num_players == 3) {
            players[i].penguins = 3;
        } else {
            players[i].penguins = 2;
        }
    }
}

void printHexagonLine(int cols) {
   
    printf("\n");
    cols = (cols+1)/2;

     for (int i = 0; i < cols - 1; i++) {
        printf(" /      \\");
        printf("       ");
    }
    printf(" /      \\");
    printf("\n");
    
	for (int i = 0; i < cols - 1; i++) {
	    printf("/        \\");
	    printf("______");  
	}
	printf("/        \\");
    
    printf("\n");
    	for (int i = 0; i < cols - 1; i++) {
        printf("\\        /");
        printf("      ");
    }printf("\\        /");
    printf("\n");
	for (int i = 0; i < cols - 1; i++) {
        printf(" \\______/ ");
        printf("      ");
    }printf(" \\______/ ");
}
void printboard(Cell** board,int rows, int cols){
     for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
         	int k=(j+(i*9))+1;
         	printf("\x1B[%d;80H",k);	
            printf("Cell[%d][%d]: üêü=%d, üêß=%d, occupied=%d\n", i, j, board[i][j].fishes, board[i][j].penguin, board[i][j].broken);
        }
    }
}


Cell** initializeBoard(int rows, int cols) {
    srand(time(NULL)); // initialisation de rand()
    
    // Allouer dynamiquement le tableau sur le tas
    Cell** board = (Cell**)malloc(rows * sizeof(Cell*));
    for (int i = 0; i < rows; i++) {
        board[i] = (Cell*)malloc(cols * sizeof(Cell));
    }

    // Initialiser toutes les cellules avec des poissons al√©atoires entre 1 et 3
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            int luck= rand() % 2 + 1;	
            if(i==0 && j%2 !=0){
            board[i][j].fishes = 0;
            board[i][j].penguin = 0;
            board[i][j].broken = 0;
            }
            else if(luck==1) {
            board[i][j].fishes = rand() % 3 + 1; // Entre 1 et 3 poissons
            board[i][j].penguin = 0;
            board[i][j].broken = 0;
            }
            else{
            board[i][j].fishes = rand() % 2 + 2; // Entre 2 et 3 poissons
            board[i][j].penguin = 0;
            board[i][j].broken = 0;
            }
        }
    }
  
    //printf("\x1B[1;1H");
    printboard(board,rows,cols);// a titre v√©rificatif

    // Retourner le pointeur vers le tableau
    return board;
}

// Fonction de lib√©ration de la m√©moire allou√©e
void freeBoard(Cell** board, int rows) {
    for (int i = 0; i < rows; i++) {
        free(board[i]);
    }
    free(board);
}

void printfishes(Cell** board,int rows, int cols){
  printf("\x1B[3;1H");
  for(int i = 0; i < rows; i++){
    for(int j = 0; j < cols; j++){
      if(i==0){
        if(j%2==0){
        	if(j==cols-1){
			if (board[i][j].fishes == 0){
			    printf("/        \\");
			   
			  }
			  else if(board[i][j].fishes == 1){
			    printf("/   üêü   \\");
			    
			  }
			  else if(board[i][j].fishes == 2){
			    printf("/  üêüüêü  \\");
			    
			  }
			  else if(board[i][j].fishes == 3){
			    printf("/ üêüüêüüêü \\");
			    
			  }
        	}
        	else{
        		 if (board[i][j].fishes == 0){
			    printf("/        \\");
			    printf("______");
			  }
			  else if(board[i][j].fishes == 1){
			    printf("/   üêü   \\");
			    printf("______");
			  }
			  else if(board[i][j].fishes == 2){
			    printf("/  üêüüêü  \\");
			    printf("______");
			  }
			  else if(board[i][j].fishes == 3){
			    printf("/ üêüüêüüêü \\");
			    printf("______");
          		  }
        	}	
        
        }
      }
      else{
        if(j%2==0){
        int y=4*i+3;
        int x=(j*8)+1;
        printf("\x1B[%d;%dH",y,x);
          if (board[i][j].fishes == 0){
            printf("/        \\");
          
          }
          else if(board[i][j].fishes == 1){
            printf("/   üêü   \\");
            
          }
          else if(board[i][j].fishes == 2){
            printf("/  üêüüêü  \\");
            
          }
          else if(board[i][j].fishes == 3){
            printf("/ üêüüêüüêü \\");
            
          }
          
        }
	      else if(j%2==1){
		int y=(4*i)+1;
		int x=9+(8*(j-1));
		printf("\x1B[%d;%dH",y,x);
		if (board[i][j].fishes == 0){
		  printf("/        \\");

		}
		else if(board[i][j].fishes == 1){
		  printf("/   üêü   \\");

		}
		else if(board[i][j].fishes == 2){
		  printf("/  üêüüêü  \\");

		}
		else if(board[i][j].fishes == 3){
		  printf("/ üêüüêüüêü \\");

        	}		
             }		
      }
    }
  }

}




void printGameBoard(Cell** board,int rows, int cols, Player* players, int num_players) {
    int a = (4 * rows) + 2;

    // Affichage de la zone de jeu
    printf("\x1B[1;1H");
  int size=cols;
   if(size%2!=0){
    size = (size+1)/2;
    }
    else if(size%2==0){
    size=(size/2);
    }
    for (int i = 0; i < size-1; i++) {
        printf("  ______  ");
        printf("      ");
    }printf("  ______");

    for (int i = 0; i < rows; i++) {
        printHexagonLine(cols);
    }
    printfishes(board,rows,cols);
    printf("\x1B[4;5H\x1B[48;2;255;128;0müêß\x1B[0m");

    // Affichage des noms et scores des joueurs
    printf("\x1B[%d;0H\n", a);
    printf("Joueurs :\n");

    for (int i = 0; i < num_players; i++) {
        printf("Joueur %d : %s\n", i + 1, players[i].player_name);
    }
    printf("\n");
}

void clear_input_buffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {}
}

int get_valid_coordinate(const char* prompt, int max_value) {
    int value, result;
    do {
        printf("\x1B[K");  // Clear the current line
        printf("%s (0 to %d): ", prompt, max_value - 1);
        result = scanf("%d", &value);
        clear_input_buffer();  // Clear the input buffer after reading
        
        if (result != 1 || value < 0 || value >= max_value) {
            printf("\x1B[1F\x1B[K");  // Move cursor up and clear line
            printf("Invalid input. Please enter a number between 0 and %d.\n", max_value - 1);
            printf("\x1B[1E");  // Move cursor down for next prompt
        }
    } while (result != 1 || value < 0 || value >= max_value);
    return value;
}


void movePenguin(int rows, int cols) {
    printf("\x1B[30;1H");

    int oldrows = get_valid_coordinate("Sur quelle ligne se situe le penguin que vous voulez deplacer", rows);
    int oldcols = get_valid_coordinate("Sur quelle colonne situe le penguin que vous voulez deplacer", cols);
    int newrows = get_valid_coordinate("Sur quelle ligne voulez vous deplacer votre penguin", rows);
    int newcols = get_valid_coordinate("Sur quelle colonne voulez vous deplacer votre penguin", cols);

    // Clear the old penguin's position
    int posxx, posyy;
    if (oldcols % 2 == 0) {
        posxx = 5 + (oldcols * 8);
        posyy = 4 + (oldrows * 4);
    } else {
        posxx = 13 + ((oldcols - 1) * 8);
        posyy = 6 + ((oldrows - 1) * 4);
    }
    printf("\x1B[%d;%dH   ", posyy, posxx); // Clear the old penguin's position

    // Place the new penguin at the new location
    int posx, posy;
    if (newcols % 2 == 0) {
        posx = 5 + (newcols * 8);
        posy = 4 + (newrows * 4);
    } else {
        posx = 13 + ((newcols - 1) * 8);
        posy = 6 + ((newrows - 1) * 4);
    }
    printf("\x1B[%d;%dHüêß", posy, posx); // Place the penguin at the new location

    printf("\x1B[0;0H"); // Reset cursor position
}


    
void affichePenguin(Cell** board, int rows, int cols) {
    srand(time(NULL)); // Initialize random number generator for different outcomes each run
	for(int i=0;i<12;i++){
      	    int newrows =rand() % rows-1 + 1;;
	    int newcols =rand() % cols-1 + 1;;
	   
	   if (newrows ==0){
	   newrows+=1;
	   }
	    if(newcols%2==0){
		int posx= 5+(newcols*8);
		int posy= 4+(newrows*4);
		printf("\x1B[%d;%dHüêß",posy,posx);
		
	    }
	    
	    else{
	    	newcols = newcols-1;
		int posx= 13+(newcols*8);
		int posy= 6+((newrows-1)*4);
		printf("\x1B[%d;%dHüêß",posy,posx);
        
    		}
    }
}



int better_scan(const char *format, ...) {
    int ret_var = 0;
    int value;
    va_list args;

    va_start(args, format);
    do {
        vprintf(format, args);  // Use the format string and args
        ret_var = scanf("%d", &value);
        while (getchar() != '\n');  // Clear the input buffer
    } while (ret_var != 1);
    va_end(args);

    return value;
}
    



int main() {
    int rows, cols;
    Player* players = NULL;
    int num_players;
    
    system("clear");
    num_players = better_scan("Enter the number of players (2 to 6): ");

    if (num_players < 2 || num_players > 6) {
        printf("Number of players must be between 2 and 6.\n");
        exit(EXIT_FAILURE);
    }

    players = malloc(sizeof(Player) * num_players);
    if (players == NULL) {
        printf("Error allocating memory for players\n");
        exit(EXIT_FAILURE);
    }
    
    setupPlayers(players, num_players);
    
    // Fixation de la taille du plateau de jeu
    printf("Nombre de lignes du plateau de jeu : ");
    scanf("%d", &rows);
    printf("Nombre de colonnes du plateau de jeu (nombre impaire recquis): ");
    scanf("%d", &cols);
    if (cols%2==0){
    cols +=1;
    }
    

    // V√©rification de la validit√© de la taille du plateau de jeu
    if (rows < 1 || cols < 1 || rows > MAX_ROWS || cols > MAX_COLS) {
        printf("Taille du plateau invalide. Veuillez choisir des dimensions entre 1 et 9.\n");
        free(players);
        return 1;
    }
    system("clear");
    Cell** board = initializeBoard(rows, cols);
    
    // Affichage de la zone de jeu
    printGameBoard(board,rows, cols, players, num_players);
    affichePenguin(board, rows, cols);
    for(int i=0;i<10;i++){
    movepenguin(rows, cols);
    printf("\x1B[20;1H");
    }
   

    int a = (4 * rows) + 10;
    printf("\x1B[%d;0H\n", a);
    
    free(players);
    freeBoard(board, rows);
    
    
    return 0;
    
    
}
