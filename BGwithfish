#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define MAX_ROWS 9
#define MAX_COLS 9
#define MAX_PLAYERS 6
#define MAX_NAME_LENGTH 49
#define PLAYER_NAME_BUFFER 50 
typedef struct {
    int fishes; // Nombre de poissons sur la case
    int penguin; // Identifiant du pingouin sur la case, 0 si aucun
    int broken; // Indique si la case est occup√©e (1 pour oui, 0 pour non)
} Cell;

typedef struct {
    char player_name[PLAYER_NAME_BUFFER];
    int score;
    int penguins; 
} Player;

Player players[MAX_PLAYERS];
int num_players;

void setupPlayers() {
    do {
        printf("Enter the number of players (2 to 6): ");
        scanf("%d", &num_players);
    } while (num_players < 2 || num_players > 6);

    for (int i = 0; i < num_players; i++) {
        printf("Enter name for player %d (up to 49 characters): ", i + 1);
        scanf("%s", players[i].player_name);
        while (getchar() != '\n');  

        if (strlen(players[i].player_name) > MAX_NAME_LENGTH) {
            printf("Name entered is too long. Please enter a name up to 49 characters.\n");
            scanf("%s", players[i].player_name);
        }

        players[i].score = 0;

        if (num_players == 2) {
            players[i].penguins = 4;
        } else if (num_players == 3) {
            players[i].penguins = 3;
        } else {
            players[i].penguins = 2;
        }
    }
}
void initializeBoard(Cell board[][MAX_COLS], int rows, int cols) {
    srand(time(NULL));

    // Initialiser toutes les cellules avec des poissons al√©atoires entre 1 et 3
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            board[i][j].fishes = rand() % 3 + 1; // Entre 1 et 3 poissons
            board[i][j].penguin = 0; // Aucun pingouin au d√©but
            board[i][j].broken = 0; // Case non occup√©e au d√©but
        }
    }

    // Choisir al√©atoirement deux cases pour avoir z√©ro poisson
    board[0][1].fishes = 0;
    board[0][1].penguin = 0;
    int zeroFishCells = 2;
    while (zeroFishCells > 0) {
        int i = rand() % rows;
        int j = rand() % cols;
        if (board[i][j].fishes != 0 && i!=0 && j!=1) { // Assurez-vous que la case n'a pas d√©j√† z√©ro poisson et que √ßa ne soit pas la case toujours vide
            board[i][j].fishes = 0;
            zeroFishCells--;
            board[i][j].penguin =1;
        }
    }
}
void printHexagonLine(Cell board[][MAX_COLS],int num_hexagons) {
    int rows=4;
    for (int i = 0; i < rows; i++) {

    printf("\n");

    for (int j = 0; j < num_hexagons; j++) {
        printf(" /      \\ ");
        printf("      ");
    }
    printf("\n");

        for (int j = 0; j < num_hexagons-1; j++) {
            if (board[i][j].fishes == 0){
                printf("/        \\");
            }
            else if(board[i][j].fishes == 1){
                printf("/   üêü   \\");
            }
            else if(board[i][j].fishes == 2){
                printf("/  üêüüêü  \\");
            }
            else if(board[i][j].fishes == 3){
                printf("/ üêüüêüüêü \\");
            }
            
            printf("______");  
        }
        printf("/        \\");

    printf("\n");
    for (int j = 0; j < num_hexagons; j++) {
        printf("\\        /");
        printf("      ");
    }
    printf("\n");
    for (int j = 0; j < num_hexagons; j++) {
        printf(" \\______/ ");
        printf("      ");
    }
    }
}

void printGameBoard(Cell board[][MAX_COLS],int rows, int cols) {
    int a = (4 * rows) + 2;

    // Affichage de la zone de jeu
    printf("\x1B[1;1H");
    for (int i = 0; i < cols; i++) {
        printf("  ______  ");
        printf("      ");
    }
    printHexagonLine(board,cols);
    
    printf("\x1B[3;5H\x1B[48;2;255;128;0müêß\x1B[0m");

    // Affichage des noms et scores des joueurs
    printf("\x1B[%d;0H\n", a);
    printf("Joueurs :\n");

    for (int i = 0; i < num_players; i++) {
        printf("Joueur %d : %s\n", i + 1, players[i].player_name);
    }
    printf("\n");
}

int main() {
    system("clear");
    int rows, cols;
    setupPlayers();

    // Fixation de la taille du plateau de jeu
    printf("Nombre de lignes du plateau de jeu : ");
    scanf("%d", &rows);
    printf("Nombre de colonnes du plateau de jeu : ");
    scanf("%d", &cols);
    

    // V√©rification de la validit√© de la taille du plateau de jeu
    if (rows < 1 || cols < 1 || rows > MAX_ROWS || cols > MAX_COLS) {
        printf("Taille du plateau invalide. Veuillez choisir des dimensions entre 1 et 9.\n");
        return 1;
    }
    Cell board[rows][cols];
    initializeBoard(board, rows, cols);

    // Affichage de la zone de jeu
    printGameBoard(board,rows,cols);

    int a = (4 * rows) + 10;
    printf("\x1B[%d;0H\n", a);

    return 0;
}

