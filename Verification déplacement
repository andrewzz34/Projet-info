#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_ROWS 9
#define MAX_COLS 9
#define MAX_PLAYERS 6
#define MAX_NAME_LENGTH 49
#define PLAYER_NAME_BUFFER 50

typedef struct {
  char player_name[PLAYER_NAME_BUFFER];
  int score;
  int penguins;
  int id_player;
} Player;

typedef struct {
  int fishes;   // Nombre de poissons sur la case
  int penguin;  // Identifiant du pingouin sur la case, 0 si aucun
  int broken;   // Indique si la case est occupée (1 pour oui, 0 pour non)
  int playeron; // a quel joueur appartient la case (0 si aucun)
} Cell;

//case en haut ///////////////////////////////////////////////////////////////////
int verifyT(Cell **board, int crows, int ccols, int rows, int cols){
  //case en haut 
  if ((board[crows][ccols + 1].penguin =0 && board[crows][ccols + 1].broken == 0)) {
      return 1;
  } 
  else {
      return 0;
  }

}

//case en bas///////////////////////////////////////////////////////////////////
int verifyL(Cell **board, int crows, int ccols, int rows, int cols){
  //case en bas
  if ((board[crows + 1][ccols].penguin = 0 && board[crows + 1][ccols].broken == 0)) {
      return 1;
  } 
  else {
      return 0;
  }
}
//case en haut a droite///////////////////////////////////////////////////////////////////

int verifyTR(Cell **board, int crows, int ccols, int rows, int cols){
  //case en haut a droite colonnes paire
  if(ccols%2==0){
       if ((board[crows][ccols + 1].penguin =0 && board[crows][ccols + 1].broken == 0)) {
         return 1;
       } 
       else {
         return 0;
       }
     }

  else{
    //case en haut a droite colonnes impaire

     if ((board[crows-1][ccols + 1].penguin =0 && board[crows][ccols + 1].broken == 0)) {
       return 1;
     } 
     else {
       return 0;
     }
  }
}


//case en bas a droite///////////////////////////////////////////////////////////////////

int verifyLR(Cell **board, int crows, int ccols, int rows, int cols){
  //case en bas à droite colonnes paire
  if(ccols%2==0){

    if ((board[crows+1][ccols + 1].penguin =0 && board[crows+1][ccols + 1].broken == 0)) {
        return 1;
    } else {
        return 0;
    }
  }
    //case en bas à droite colonnes impaire

  else{
    if ((board[crows][ccols + 1].penguin =0 && board[crows][ccols + 1].broken == 0)) {
      return 1;
    } 
    else {
      return 0;
    }
  }
 
}

//case en bas a gauche///////////////////////////////////////////////////////////////////

int verifyLL(Cell **board, int crows, int ccols, int rows, int cols){
    if(ccols%2==0){

      if ((board[crows+1][ccols - 1].penguin =0 && board[crows+1][ccols - 1].broken == 0)) {
          return 1;
      } 
      else {
          return 0;
      }
    }
      //case en bas à gauche colonnes impaire

    else{
      if ((board[crows][ccols - 1].penguin =0 && board[crows][ccols - 1].broken == 0)) {
        return 1;
      } 
      else {
        return 0;
      }
    }

}


int verifyTL(Cell **board, int crows, int ccols, int rows, int cols){
  if(ccols%2==0){

    if ((board[crows][ccols - 1].penguin =0 && board[crows][ccols - 1].broken == 0)) {
      return 1;
    } 
    else {
      return 0;
    }
  }
        //case en bas à droite colonnes impaire

  else{
        if ((board[crows- 1][ccols - 1].penguin =0 && board[crows- 1][ccols - 1].broken == 0)) {
          return 1;
        } 
        else {
          return 0;
        }
      }
 }













int possiblemove(Cell **board, int crows, int ccols, int rows, int cols) {
  ///// Cette fonction sert à compter le nombre de directions possibles d'un joueurs, je me suis rendu
  //compte apres 180 lignes qu'il aurait été plus judicieux de faires 6 autres fonctions du style verif en 
  //haut a gauche, en haut a droite, en bas a gauche voila...

  int posmove = 0;
  // cas de la première ligne/////////////////////////////////////////////////////////
  if (crows == 0) { 
    // cas de la première colonne de la première ligne
    if (ccols == 0) {
      //case en bas à droite
      posmove += verifyLR(board, crows, ccols, rows, cols);
      // case en dessous
      posmove += verifyL(board, crows, ccols, rows, cols);

    }

    //cases entre la première et la dernière colonne
    else if (ccols % 2 == 0 && ccols != 0 && ccols!=cols-1) {
      //case en bas a droite
      posmove += verifyLR(board, crows, ccols, rows, cols);

      //case en dessous
      posmove += verifyL(board, crows, ccols, rows, cols);

      //case en bas a gauche
      posmove += verifyLL(board, crows, ccols, rows, cols);

    } 
    // cas première ligne dernière colonne

    else {
      //case en dessous
      posmove += verifyL(board, crows, ccols, rows, cols);

      //case en bas a gauche
      posmove += verifyLL(board, crows, ccols, rows, cols);

    }
  }

    

  ///cas de la dernière ligne//////////////////////////////////////////////////////////////////////////
  else if(crows==rows-1){
   //cas de la première colonne
    if(ccols==0){
     //case en haut
      posmove += verifyT(board, crows, ccols, rows, cols);

      //case en haut a droite
      posmove += verifyTR(board, crows, ccols, rows, cols);

    }
    //cases entre la première et la dernière colonne sur la dernière ligne des colonnes paires
    else if (ccols % 2 == 0 && ccols != 0 && ccols!=cols-1){
      //case en haut a gauche
      posmove += verifyTL(board, crows, ccols, rows, cols);

      //case en haut
      posmove += verifyT(board, crows, ccols, rows, cols);

      //case en haut a droite
      posmove += verifyTR(board, crows, ccols, rows, cols);


    }
      //cases entre la première et la dernière colonne sur la dernière ligne des colonnes impaires
    else if (ccols % 2 != 0  && ccols!=cols-1){
      //case en haut a gauche
      posmove += verifyTL(board, crows, ccols, rows, cols);

      //case en haut
      posmove += verifyT(board, crows, ccols, rows, cols);

      //case en haut a droite
      posmove += verifyTR(board, crows, ccols, rows, cols);

      //case en bas a gauche
      posmove += verifyLL(board, crows, ccols, rows, cols);

      //case en bas a droite
      posmove += verifyLR(board, crows, ccols, rows, cols);


      }

    //cas dernière colonne
    else{
      //case en haut a gauche
      posmove += verifyTL(board, crows, ccols, rows, cols);

      //case en haut
      posmove += verifyT(board, crows, ccols, rows, cols);

      
    }

  }
  ///cas de la dernière première colonne//////////////////////////////////////////////////////////////////
  else if(ccols==0 && crows!=0 && crows!= rows-1){
    //case en haut
    posmove += verifyT(board, crows, ccols, rows, cols);

    //case en haut a droite
    posmove += verifyTR(board, crows, ccols, rows, cols);

    //case en bas a droite
    posmove += verifyLR(board, crows, ccols, rows, cols);
    //case en bas 
    posmove += verifyL(board, crows, ccols, rows, cols);

  }
  else if(ccols==cols-1 && crows!=0 && crows!= rows-1){
    //case en haut
    posmove += verifyT(board, crows, ccols, rows, cols);

    //case en haut a gauche
    posmove += verifyTL(board, crows, ccols, rows, cols);

    //case en bas a gauche
    posmove += verifyLL(board, crows, ccols, rows, cols);
    //case en bas 
    posmove += verifyL(board, crows, ccols, rows, cols);

  }
  else{
    //case en haut a gauche
    posmove += verifyTL(board, crows, ccols, rows, cols);

    //case en haut
    posmove += verifyT(board, crows, ccols, rows, cols);

    //case en haut a droite
    posmove += verifyTR(board, crows, ccols, rows, cols);

    //case en bas a gauche
    posmove += verifyLL(board, crows, ccols, rows, cols);

    //case en bas a droite
    posmove += verifyLR(board, crows, ccols, rows, cols);

    //case en bas
    posmove += verifyL(board, crows, ccols, rows, cols);
    
  }
  return posmove;
}
