#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_ROWS 3
#define MAX_COLS 3

// Structure repr√©sentant une case du plateau de jeu
typedef struct {
    int fishes; // Nombre de poissons sur la case
    int penguin; // Identifiant du pingouin sur la case, 0 si aucun
    int occupied; // Indique si la case est occup√©e (1 pour oui, 0 pour non)
} Cell;

// Fonction pour initialiser al√©atoirement le nombre de poissons sur chaque case
void initializeBoard(Cell board[][MAX_COLS], int rows, int cols) {
    srand(time(NULL));

    // Initialiser toutes les cellules avec des poissons al√©atoires entre 1 et 3
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            board[i][j].fishes = rand() % 3 + 1; // Entre 1 et 3 poissons
            board[i][j].penguin = 0; // Aucun pingouin au d√©but
            board[i][j].occupied = 0; // Case non occup√©e au d√©but
        }
    }

    // Choisir al√©atoirement deux cases pour avoir z√©ro poisson
    int zeroFishCells = 2;
    while (zeroFishCells > 0) {
        int i = rand() % rows;
        int j = rand() % cols;
        if (board[i][j].fishes != 0) { // Assurez-vous que la case n'a pas d√©j√† z√©ro poisson
            board[i][j].fishes = 0;
            zeroFishCells--;
            board[i][j].penguin =1;
        }
    }
}

// Fonction pour afficher le tableau de cellules (√† des fins de v√©rification)
void printBoard(Cell board[][MAX_COLS], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("Cell[%d][%d]: üêü=%d, üêß=%d, occupied=%d\n", i, j, board[i][j].fishes, board[i][j].penguin, board[i][j].occupied);
        }
    }
}

int main() {
    int rows = MAX_ROWS;
    int cols = MAX_COLS; 
    Cell board[MAX_ROWS][MAX_COLS];

    // Initialisation du plateau de jeu
    initializeBoard(board, rows, cols);

    // Affichage du tableau de cellules pour v√©rification
    printBoard(board, rows, cols);

    return 0;
}
